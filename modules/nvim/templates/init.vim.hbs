---
target_path = "{{dirs.config}}/nvim/init.vim"
comment_format = "\" "
---
set mouse=""
set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2

set number

set encoding=utf-8

set hlsearch
set incsearch
"set ignorecase
"set smartcase

map <CR> :nohl<cr>

" fixes slow/flickery scrolling issue
set lazyredraw

"set cursorline
set title

call plug#begin('~/.config/nvim/plugged')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    let g:deoplete#enable_at_startup = 1
    " use tab for completion
    inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

  " Plug 'sebastianmarkow/deoplete-rust'
  "   let g:deoplete#sources#rust#documentation_max_height=20
  "   let g:deoplete#sources#rust#racer_binary='$HOME/.cargo/bin/racer'
  "   let g:racer_cmd = "$HOME/.cargo/bin/racer"
  "   let g:racer_experimental_completer = 1
  "   " FIXME:
  "   let g:deoplete#sources#rust#rust_source_path='$HOME/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src'

  Plug 'sheerun/vim-polyglot'
  Plug 'neomake/neomake'
    " Run Neomake when I save any buffer
    augroup localneomake
      autocmd! BufWritePost * Neomake
    augroup END
    " Don't tell me to use smartquotes in markdown ok?
    let g:neomake_markdown_enabled_makers = []
    let g:neomake_javascript_enabled_makers = ['eslint']
    let g:neomake_elixir_enabled_makers = ['mix', 'credo']

  " elixir/erlang docs
  Plug 'slashmili/alchemist.vim'
  Plug 'powerman/vim-plugin-AnsiEsc'

  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-rhubarb' " GBrowse
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-projectionist'
  Plug 'bronson/vim-trailing-whitespace'
  Plug 'mileszs/ack.vim'

  Plug 'airblade/vim-gitgutter'
  " Plug 'ctrlpvim/ctrlp.vim'
  " Plug 'tpope/vim-vinegar'
  " Plug 'scrooloose/nerdtree'

  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  Plug 'mattn/emmet-vim'
  Plug 'jalvesaq/vimcmdline'
  Plug 'kshenoy/vim-signature'
  Plug 'AndrewRadev/splitjoin.vim'

  " Plug 'racer-rust/vim-racer', { 'for': 'rust' }
  Plug 'Shougo/neosnippet'
  Plug 'Shougo/neosnippet-snippets'
  " Plug 'terryma/vim-multiple-cursors'
  Plug 'lifepillar/vim-solarized8'

  Plug 'chriskempson/base16-vim'

  Plug 'itchyny/lightline.vim'
  " Plug 'vim-airline/vim-airline'
  " Plug 'vim-airline/vim-airline-themes'

  Plug 'shmargum/vim-sass-colors'
  Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

call plug#end()

set background=dark
syntax enable
colorscheme base16-solarflare

" http://damien.lespiau.name/blog/2009/03/18/per-project-vimrc/
set exrc " enable per-directory .vimrc files
set secure " disable unsafe commands in local .vimrc files

syntax on
filetype plugin indent on

set ruler
set showcmd
set laststatus=2
set t_Co=256
set modeline
set termguicolors

" Turn backup off:
set nobackup
set nowb
set noswapfile

set wildmenu
set wildmode=full

" disable arrows
" inoremap <Up> <NOP>
" inoremap <Down> <NOP>
" inoremap <Left> <NOP>
" inoremap <Right> <NOP>
" noremap <Up> <NOP>
" noremap <Down> <NOP>
" noremap <Left> <NOP>
" noremap <Right> <NOP>

noremap <C-C> :w !{{copy_command}}<CR><CR>

exe 'syn keyword rubyKeyword let'


let g:gitgutter_sign_removed = '<<'
let g:gitgutter_sign_added = '>>'
let g:gitgutter_sign_modified = '<>'
let g:gitgutter_sign_modified_removed = '><'

" strip trailing whitespace on save
autocmd BufWritePre *.rb,*.rs,*.coffee,*.exs,*.ex,*.haml,*.js :%s/\s\+$//e

au BufRead,BufNewFile *.arb setfiletype=ruby

" hi Modified guibg=darkcyan guifg=black ctermbg=darkcyan ctermfg=black
" set statusline+=%#Modified#
" set statusline+=%{fugitive#statusline()}
" set statusline+=%*

" Use the_silver_searcher for Ack
let g:ackprg = 'ag --nogroup --nocolor --column'

set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*/admin_assets/*,*.png,bundle/*,*/bundle*/*,*/public/resources/*
" let g:ctrlp_user_command = 'ag %s --nocolor --smart-case --nogroup --hidden
"       \ --ignore .git
"       \ --ignore .svn
"       \ --ignore .DS_Store
"       \ --ignore "**/*.swf"
"       \ --ignore "**/*.png"
"       \ --ignore bundle
"       \ -g ""'
let g:jsx_ext_required = 0

let g:vim_json_syntax_conceal = 0

let g:ruby_indent_assignment_style = 'variable'

" Mapping selecting mappings
" nmap <leader><tab> <plug>(fzf-maps-n)
" xmap <leader><tab> <plug>(fzf-maps-x)
" omap <leader><tab> <plug>(fzf-maps-o)
" export FZF_DEFAULT_COMMAND='ag -g ""'
nnoremap <Space> <Nop>
let mapleader = "\<Space>"
nnoremap <leader>p :FZF<cr>
nnoremap <leader>o :Ag<cr>
nnoremap <leader>q :q<cr>

" Tab navigation
nnoremap <leader><tab> :tabnext<CR>
nnoremap <leader><leader> :tabprevious<CR>
nnoremap <leader>t :tabnew<CR>

" Insert mode completion
imap <c-x><c-w> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

map <ESC><ESC> :w<CR>

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

:highlight NeomakeErrorMsg ctermfg=227 ctermbg=237
let g:neomake_warning_sign={'text': '⚠', 'texthl': 'NeomakeErrorMsg'}
:highlight NeomakeError ctermfg=225 ctermbg=160
let g:neomake_error_sign={'text': '✖', 'texthl': 'NeomakeError'}
:highlight NeomakeWarning cterm=underline

let cmdline_app           = {}
let cmdline_app['ruby']   = 'pry'

set confirm " confirm when closing unsaved buffer (instead of E37 error)

set hidden " see https://github.com/racer-rust/vim-racer

" let g:LanguageClient_serverCommands = {
"       \ 'rust': ['~/.cargo/bin/rustup', 'run', 'nightly', 'rls']
"       \ }

" nnoremap <F5> :call LanguageClient_contextMenu()<CR><Paste>
imap <C-y>     <Plug>(neosnippet_expand_or_jump)
smap <C-y>     <Plug>(neosnippet_expand_or_jump)
xmap <C-y>     <Plug>(neosnippet_expand_target)

set noshowmode " provided by lightline or airline

let g:lightline = {
      \ 'component_function': {
      \   'filename': 'LightLineFilename'
      \ }
      \ }
function! LightLineFilename()
  return expand('%') " use relative path
endfunction
" let g:airline_powerline_fonts = 1
" let g:airline_theme = 'solarized_flood'

set diffopt+=iwhite

let g:netrw_liststyle = 3
" let b:commentary_format = '# %s'

imap jk <Esc>
nnoremap <leader>s :w<cr>

" show registers in insert mode (<C-R> to insert a reg)
inoremap <C-E> <C-O>:registers<cr>


let g:LanguageClient_serverCommands = {
  \ 'rust': ['rls'],
  \}

nnoremap gr :call LanguageClient_contextMenu()<CR>
nnoremap gd :call LanguageClient_textDocument_definition()<CR>
nnoremap gt :call LanguageClient_textDocument_typeDefinition()<CR>
